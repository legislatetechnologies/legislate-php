<?php
/**
 * CompanyFieldsDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Legislate API
 *
 * The Legislate API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CompanyFieldsDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyFieldsDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompanyFieldsDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\Swagger\Client\Model\RegisteredOfficeAddressDTO',
'company_name' => 'string',
'company_number' => 'string',
'contract_configuration_id' => 'int',
'created_by' => 'int',
'id' => 'int',
'registered_office_address' => '\Swagger\Client\Model\RegisteredOfficeAddressDTO',
'role' => 'string',
'side' => 'string',
'signatory_related_company' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
'company_name' => null,
'company_number' => null,
'contract_configuration_id' => 'int64',
'created_by' => 'int64',
'id' => 'int64',
'registered_office_address' => null,
'role' => null,
'side' => null,
'signatory_related_company' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
'company_name' => 'company_name',
'company_number' => 'company_number',
'contract_configuration_id' => 'contract_configuration_id',
'created_by' => 'created_by',
'id' => 'id',
'registered_office_address' => 'registered_office_address',
'role' => 'role',
'side' => 'side',
'signatory_related_company' => 'signatory_related_company'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
'company_name' => 'setCompanyName',
'company_number' => 'setCompanyNumber',
'contract_configuration_id' => 'setContractConfigurationId',
'created_by' => 'setCreatedBy',
'id' => 'setId',
'registered_office_address' => 'setRegisteredOfficeAddress',
'role' => 'setRole',
'side' => 'setSide',
'signatory_related_company' => 'setSignatoryRelatedCompany'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
'company_name' => 'getCompanyName',
'company_number' => 'getCompanyNumber',
'contract_configuration_id' => 'getContractConfigurationId',
'created_by' => 'getCreatedBy',
'id' => 'getId',
'registered_office_address' => 'getRegisteredOfficeAddress',
'role' => 'getRole',
'side' => 'getSide',
'signatory_related_company' => 'getSignatoryRelatedCompany'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ROLE_COLLABORATOR = 'collaborator';
const ROLE_PARTY = 'party';
const ROLE_SIGNATORY = 'signatory';
const ROLE_SUPP_SIG = 'supp_sig';
const ROLE_WITNESS = 'witness';
const SIDE_BOTH = 'both';
const SIDE_FIRST = 'first';
const SIDE_SECOND = 'second';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_COLLABORATOR,
self::ROLE_PARTY,
self::ROLE_SIGNATORY,
self::ROLE_SUPP_SIG,
self::ROLE_WITNESS,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSideAllowableValues()
    {
        return [
            self::SIDE_BOTH,
self::SIDE_FIRST,
self::SIDE_SECOND,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['company_number'] = isset($data['company_number']) ? $data['company_number'] : null;
        $this->container['contract_configuration_id'] = isset($data['contract_configuration_id']) ? $data['contract_configuration_id'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['registered_office_address'] = isset($data['registered_office_address']) ? $data['registered_office_address'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['side'] = isset($data['side']) ? $data['side'] : null;
        $this->container['signatory_related_company'] = isset($data['signatory_related_company']) ? $data['signatory_related_company'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'role', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSideAllowableValues();
        if (!is_null($this->container['side']) && !in_array($this->container['side'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'side', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\RegisteredOfficeAddressDTO
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\RegisteredOfficeAddressDTO $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_number
     *
     * @return string
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param string $company_number company_number
     *
     * @return $this
     */
    public function setCompanyNumber($company_number)
    {
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets contract_configuration_id
     *
     * @return int
     */
    public function getContractConfigurationId()
    {
        return $this->container['contract_configuration_id'];
    }

    /**
     * Sets contract_configuration_id
     *
     * @param int $contract_configuration_id contract_configuration_id
     *
     * @return $this
     */
    public function setContractConfigurationId($contract_configuration_id)
    {
        $this->container['contract_configuration_id'] = $contract_configuration_id;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return int
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param int $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets registered_office_address
     *
     * @return \Swagger\Client\Model\RegisteredOfficeAddressDTO
     */
    public function getRegisteredOfficeAddress()
    {
        return $this->container['registered_office_address'];
    }

    /**
     * Sets registered_office_address
     *
     * @param \Swagger\Client\Model\RegisteredOfficeAddressDTO $registered_office_address registered_office_address
     *
     * @return $this
     */
    public function setRegisteredOfficeAddress($registered_office_address)
    {
        $this->container['registered_office_address'] = $registered_office_address;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string $role role
     *
     * @return $this
     */
    public function setRole($role)
    {
        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($role) && !in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'role', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets side
     *
     * @return string
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side
     *
     * @param string $side side
     *
     * @return $this
     */
    public function setSide($side)
    {
        $allowedValues = $this->getSideAllowableValues();
        if (!is_null($side) && !in_array($side, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'side', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets signatory_related_company
     *
     * @return int
     */
    public function getSignatoryRelatedCompany()
    {
        return $this->container['signatory_related_company'];
    }

    /**
     * Sets signatory_related_company
     *
     * @param int $signatory_related_company signatory_related_company
     *
     * @return $this
     */
    public function setSignatoryRelatedCompany($signatory_related_company)
    {
        $this->container['signatory_related_company'] = $signatory_related_company;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
