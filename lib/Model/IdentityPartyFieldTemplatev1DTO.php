<?php
/**
 * IdentityPartyFieldTemplatev1DTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Legislate API
 *
 * The Legislate API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IdentityPartyFieldTemplatev1DTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IdentityPartyFieldTemplatev1DTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IdentityPartyFieldTemplatev1DTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'identity_field_id' => 'int',
'index' => 'int',
'label' => 'string',
'name' => 'string',
'options' => '\Swagger\Client\Model\IdentityFieldOptionDTO[]',
'parent_option' => 'string',
'required' => 'bool',
'roles_visibility_list' => '\Swagger\Client\Model\RoleVisibilityDTO[]',
'side' => 'string',
'type' => 'string',
'updated' => '\DateTime',
'validation_type' => 'string',
'value' => 'string',
'value_type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'identity_field_id' => 'int64',
'index' => 'int64',
'label' => null,
'name' => null,
'options' => null,
'parent_option' => null,
'required' => null,
'roles_visibility_list' => null,
'side' => null,
'type' => null,
'updated' => 'date-time',
'validation_type' => null,
'value' => null,
'value_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'identity_field_id' => 'identity_field_id',
'index' => 'index',
'label' => 'label',
'name' => 'name',
'options' => 'options',
'parent_option' => 'parentOption',
'required' => 'required',
'roles_visibility_list' => 'rolesVisibilityList',
'side' => 'side',
'type' => 'type',
'updated' => 'updated',
'validation_type' => 'validation_type',
'value' => 'value',
'value_type' => 'value_type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'identity_field_id' => 'setIdentityFieldId',
'index' => 'setIndex',
'label' => 'setLabel',
'name' => 'setName',
'options' => 'setOptions',
'parent_option' => 'setParentOption',
'required' => 'setRequired',
'roles_visibility_list' => 'setRolesVisibilityList',
'side' => 'setSide',
'type' => 'setType',
'updated' => 'setUpdated',
'validation_type' => 'setValidationType',
'value' => 'setValue',
'value_type' => 'setValueType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'identity_field_id' => 'getIdentityFieldId',
'index' => 'getIndex',
'label' => 'getLabel',
'name' => 'getName',
'options' => 'getOptions',
'parent_option' => 'getParentOption',
'required' => 'getRequired',
'roles_visibility_list' => 'getRolesVisibilityList',
'side' => 'getSide',
'type' => 'getType',
'updated' => 'getUpdated',
'validation_type' => 'getValidationType',
'value' => 'getValue',
'value_type' => 'getValueType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SIDE_BOTH = 'both';
const SIDE_FIRST = 'first';
const SIDE_SECOND = 'second';
const TYPE_ADDRESS = 'address';
const TYPE_CURRENCY = 'currency';
const TYPE_DATE = 'date';
const TYPE_DISTANCE = 'distance';
const TYPE_DURATION = 'duration';
const TYPE_DURATION_PLAIN = 'duration_plain';
const TYPE_INPUT = 'input';
const TYPE_RADIO = 'radio';
const TYPE_SELECT = 'select';
const TYPE_UPLOAD = 'upload';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSideAllowableValues()
    {
        return [
            self::SIDE_BOTH,
self::SIDE_FIRST,
self::SIDE_SECOND,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ADDRESS,
self::TYPE_CURRENCY,
self::TYPE_DATE,
self::TYPE_DISTANCE,
self::TYPE_DURATION,
self::TYPE_DURATION_PLAIN,
self::TYPE_INPUT,
self::TYPE_RADIO,
self::TYPE_SELECT,
self::TYPE_UPLOAD,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['identity_field_id'] = isset($data['identity_field_id']) ? $data['identity_field_id'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['parent_option'] = isset($data['parent_option']) ? $data['parent_option'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['roles_visibility_list'] = isset($data['roles_visibility_list']) ? $data['roles_visibility_list'] : null;
        $this->container['side'] = isset($data['side']) ? $data['side'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['validation_type'] = isset($data['validation_type']) ? $data['validation_type'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['value_type'] = isset($data['value_type']) ? $data['value_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSideAllowableValues();
        if (!is_null($this->container['side']) && !in_array($this->container['side'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'side', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identity_field_id
     *
     * @return int
     */
    public function getIdentityFieldId()
    {
        return $this->container['identity_field_id'];
    }

    /**
     * Sets identity_field_id
     *
     * @param int $identity_field_id identity_field_id
     *
     * @return $this
     */
    public function setIdentityFieldId($identity_field_id)
    {
        $this->container['identity_field_id'] = $identity_field_id;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int $index index
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Swagger\Client\Model\IdentityFieldOptionDTO[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Swagger\Client\Model\IdentityFieldOptionDTO[] $options options
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets parent_option
     *
     * @return string
     */
    public function getParentOption()
    {
        return $this->container['parent_option'];
    }

    /**
     * Sets parent_option
     *
     * @param string $parent_option parent_option
     *
     * @return $this
     */
    public function setParentOption($parent_option)
    {
        $this->container['parent_option'] = $parent_option;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets roles_visibility_list
     *
     * @return \Swagger\Client\Model\RoleVisibilityDTO[]
     */
    public function getRolesVisibilityList()
    {
        return $this->container['roles_visibility_list'];
    }

    /**
     * Sets roles_visibility_list
     *
     * @param \Swagger\Client\Model\RoleVisibilityDTO[] $roles_visibility_list roles_visibility_list
     *
     * @return $this
     */
    public function setRolesVisibilityList($roles_visibility_list)
    {
        $this->container['roles_visibility_list'] = $roles_visibility_list;

        return $this;
    }

    /**
     * Gets side
     *
     * @return string
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side
     *
     * @param string $side side
     *
     * @return $this
     */
    public function setSide($side)
    {
        $allowedValues = $this->getSideAllowableValues();
        if (!is_null($side) && !in_array($side, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'side', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets validation_type
     *
     * @return string
     */
    public function getValidationType()
    {
        return $this->container['validation_type'];
    }

    /**
     * Sets validation_type
     *
     * @param string $validation_type validation_type
     *
     * @return $this
     */
    public function setValidationType($validation_type)
    {
        $this->container['validation_type'] = $validation_type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets value_type
     *
     * @return string
     */
    public function getValueType()
    {
        return $this->container['value_type'];
    }

    /**
     * Sets value_type
     *
     * @param string $value_type value_type
     *
     * @return $this
     */
    public function setValueType($value_type)
    {
        $this->container['value_type'] = $value_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
